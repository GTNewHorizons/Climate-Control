package climatecontrol.genLayerPack;

import net.minecraft.world.gen.layer.GenLayer;

public class GenLayerZoom extends GenLayerPack {

    private static final String __OBFID = "CL_00000572";
    private boolean biomesOnly = false;
    private int[] scratchpad = new int[7 * 7];
    private int[] resultpad = new int[7 * 7];

    public GenLayerZoom(long par1, GenLayer par3GenLayer) {
        this(par1, par3GenLayer, false);
    }

    public GenLayerZoom(long par1, GenLayer par3GenLayer, boolean biomesOnly) {
        super(par1);
        super.parent = par3GenLayer;
        this.biomesOnly = biomesOnly;
        if (biomesOnly && par3GenLayer.getClass()
            .getCanonicalName()
            .contains("River")) throw new RuntimeException();
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4) {
        int i1 = par1 >> 1;
        int j1 = par2 >> 1;
        int parentXSize = (par3 >> 1) + 2;
        int parentZSize = (par4 >> 1) + 2;
        int[] aint = this.parent.getInts(i1, j1, parentXSize, parentZSize);
        int i2 = parentXSize - 1 << 1;
        int j2 = parentZSize - 1 << 1;

        if (scratchpad.length != i2 * j2) {
            scratchpad = new int[i2 * j2];
        }
        int[] aint1 = scratchpad;
        poison(aint1, i2 * j2);
        int l2;

        // if ((par1/2)*2!= par1) throw new RuntimeException("par1 "+ par1 + " i1 " + i1 + " i2 "+ i2);
        if (biomesOnly) {
            for (int i = 0; i < parentXSize; i++) {
                for (int j = 0; j < parentZSize; j++) {
                    if (aint[i * parentZSize + j] > 256)
                        throw new RuntimeException("biome ID" + aint[i * par3 + j] + " " + this.parent.toString());
                }
            }
        }
        /*
         * for (int parentX = 0; parentX < parentXSize -1; parentX ++) {
         * for (int parentZ = 0; parentZ < parentZSize-1; parentZ ++) {
         * final int upperLeft = aint[parentX + parentZ * parentXSize];
         * final int upperRight = aint[parentX + 1 + parentZ *parentXSize];
         * final int lowerLeft = aint[parentX + (parentZ + 1) * parentXSize];
         * final int lowerRight = aint[parentX + 1 + (parentZ + 1) *parentXSize];
         * this.initChunkSeed((long)((parentX + i1)<<1 ), (long)((parentZ + j1))<<1);
         * final int childX = parentX << 1;
         * final int childZ = parentZ << 1;
         * aint1[childX + childZ *i2] = upperLeft;
         * aint1[childX + (childZ + 1) *i2] = selectRandom(new int[] {upperLeft,lowerLeft});
         * aint1[childX + 1 + childZ *i2] = selectRandom(new int[] {upperLeft,upperRight});
         * aint1[childX + 1 + (childZ + 1) *i2] = selectModeOrRandom(upperLeft,upperRight,lowerLeft,lowerRight);
         * }
         * }
         */

        for (int k2 = 0; k2 < parentZSize - 1; k2++) {
            l2 = (k2 << 1) * i2;
            int i3 = 0;
            int j3 = aint[i3 + 0 + (k2 + 0) * parentXSize];

            for (int k3 = aint[i3 + 0 + (k2 + 1) * parentXSize]; i3 < parentXSize - 1; ++i3) {
                this.initChunkSeed((long) (i3 + i1 << 1), (long) (k2 + j1 << 1));
                int l3 = aint[i3 + 1 + (k2 + 0) * parentXSize];
                int i4 = aint[i3 + 1 + (k2 + 1) * parentXSize];
                if (biomesOnly) {
                    if (j3 > 256) throw new RuntimeException("j3 " + j3 + " l2 " + l2);
                    if (k3 > 256) throw new RuntimeException("k3 " + k3 + " l2 " + l2);
                    if (l3 > 256) throw new RuntimeException("l3 " + l3 + " l2 " + l2);
                    if (l3 > 256) throw new RuntimeException("i4 " + i4 + " l2 " + l2);
                    if (j3 < -1) throw new RuntimeException("j3 " + j3 + " l2 " + l2);
                    if (k3 < -1) throw new RuntimeException("k3 " + k3 + " l2 " + l2);
                    if (l3 < -1) throw new RuntimeException("l3 " + l3 + " l2 " + l2);
                    if (l3 < -1) throw new RuntimeException("i4 " + i4 + " l2 " + l2);
                }
                aint1[l2] = j3;
                aint1[l2++ + i2] = this.selectRandom(new int[] { j3, k3 });
                aint1[l2] = this.selectRandom(new int[] { j3, l3 });
                aint1[l2++ + i2] = this.selectModeOrRandom(j3, l3, k3, i4);
                j3 = l3;
                k3 = i4;
            }
        }

        taste(aint1, i2 * j2);
        if (resultpad.length != i2 * j2) {
            resultpad = new int[i2 * j2];
        }
        int[] aint2 = resultpad;
        poison(aint2, par3 * par4);

        /*
         * for (int i = 0; i < par3; i ++) {
         * for (int j = 0; j < par4; j++) {
         * aint2[i + par3 * j]= aint1[i + (par1 & 1) + i2 * (j+ (par2 & 1))];
         * if (biomesOnly&&((aint2[i + par3 * j] > 256)||(aint2[i + par3 * j] < -2 ))) {
         * throw new RuntimeException( "i " + i + " j " + j + " par1 " + par1 + " par2 " +
         * par2 + " par3 " + par3 + " par4 " + par4);
         * }
         * }
         * }
         */
        for (l2 = 0; l2 < par4; l2++) {
            System.arraycopy(aint1, (l2 + (par2 & 1)) * i2 + (par1 & 1), aint2, l2 * par3, par3);
        }

        if (biomesOnly) {
            for (int i = 0; i < par3 * par4; i++) {
                if (aint2[i] > 256) throw new RuntimeException();
                if (aint2[i] == -1) throw new RuntimeException();
            }
        }
        taste(aint2, par3 * par4);
        return aint2;
    }

    /**
     * Magnify a layer. Parms are seed adjustment, layer, number of times to magnify
     */
    public static GenLayer magnify(long par0, GenLayer par2GenLayer, int par3) {
        Object object = par2GenLayer;

        for (int k = 0; k < par3; ++k) {
            object = new GenLayerZoom(par0 + (long) k, (GenLayer) object);
        }

        return (GenLayer) object;
    }
}
